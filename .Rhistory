importance(rf_mod2) #look at importance of predictors
varImpPlot(rf_mod2)
rf_pred2 <- predict(rf_mod2, newdata=test[,-23], type="prob")
rf_auc2 <- auc(test$readmitted, rf_pred[,2])
rf_auc2 <- auc(test$readmitted, rf_pred2[,2])
plot(roc(test$readmitted,rf_pred2[,2]), main="ROC of Random Forest")
rf_auc
rf_auc
rf_auc2
##### 2a. Random Forest - tuning parameters ####
set.seed(1)
rf_mod2 <- randomForest(readmitted~., data=train,ntree=500, mtry=3)
print(rf_mod2) #print results
varImpPlot(rf_mod2)
rf_pred2 <- predict(rf_mod2, newdata=test[,-23], type="prob")
rf_auc2 <- auc(test$readmitted, rf_pred2[,2])
rf_auc2
################### Dummy Variables ####################################################
dmy <- dummyVars("~.", data=new_db, fullRank = T)
db_dmy <- data.frame(predict(dmy, newdata=new_db))
head(db_dmy)
set.seed(1)
train_ind1 <- createDataPartition(y = db_dmy$readmitted.1, p=0.75, list=FALSE)
train1 <- db_dmy[train_ind1, ]
test1 <- db_dmy[-train_ind1, ]
#check to see if ratios are maintained
table(train1$readmitted.1)
table(test1$readmitted.1)
# 1. Logistic Regression
set.seed(1)
lg_mod <- glm(readmitted.1~., family=binomial(link='logit'),data=train1)
summary(lg_mod)
#predictions with probabilities
lg_pred <- predict(lg_mod, newdata=test1[,-123], type="response")
lg_auc <- auc(test1$readmitted.1, lg_pred)
plot(roc(test1$readmitted.1,lg_pred), main="ROC of Logstic Regression")
lg_auc
#Heritage Health Network Analysis
rm(list=ls())
cat("\014")
dev.off()
getwd()
setwd("~/GitHub/heritage-health")
#load in required packages
if(!(require(readr))) install.packages("readr")
if(!(require(dplyr))) install.packages("dplyr")
#load in required packages
if(!(require(readr))) install.packages("readr")
library(readr)
#load in dataset
DIH_Y1_Target <- read_csv("DIH_Y1_Target")
df1<- DIH_Y1_Target
################################ Prelim look at the data #########################################
attach(df1)
str(df1) #overview of data types
colnames(df1)
summary(db) #summary statistics
summary(df1) #summary statistics
dim(df1)
sum(is.na(df1))
sapply(df1, function(x) sum(is.na(x))))
sapply(df1, function(x) sum(is.na(x)))
sum(is.na(df1$DSFS))
View(df1)
length(unique(MemberID))
out_Agg_dummy_r01 <- read.csv("C:/Users/phamn_000/Downloads/out_Agg_dummy_r01.csv")
View(out_Agg_dummy_r01)
str(df1)
################# Data Manipulation #####################
# fixing DSFS - days since first claim
df1$DSFS<- case_when(
df1$DSFS == "0- 1 month" ~ 1,
df1$DSFS == "1- 2 months" ~ 2,
df1$DSFS == "2- 3 months" ~ 3,
df1$DSFS == "3- 4 months" ~ 4,
df1$DSFS == "4- 5 months" ~ 5,
df1$DSFS == "5- 6 months" ~ 6,
df1$DSFS == "6- 7 months" ~ 7,
df1$DSFS == "7- 8 months" ~ 8,
df1$DSFS == "8- 9 months" ~ 9,
df1$DSFS == "9-10 months" ~ 10,
df1$DSFS == "10-11 months" ~ 11,
df1$DSFS == "11-12 months" ~ 12,
TRUE~0
)
#sanity check
summary(df1$DSFS)
View(df1)
str(DSFS)
str(df1$DSFS)
df1$DSFS <- as.integer(df1$DSFS)
attach(df1)
str(DSFS)
str(df1)
str(out_Agg_dummy_r01$MemberID)
#converting pseudonyms
df1$MemberID <- as.character(df1$MemberID)
df1$ProviderID <- as.character(df1$ProviderID)
df1$Vendor <- as.character(df1$Vendor)
df1$PCP <- as.character(df1$PCP)
#fixing payDelay
df1$PayDelay[df1$PayDelay == "162+"] <- 162
df1$PayDelay<- as.integer(df1$PayDelay)
str(df1$PayDelay)
unique(LengthOfStay)
# fixing length of stay
df1$LengthOfStay<- case_when(
df1$LengthOfStay == "1 day" ~ 1,
df1$LengthOfStay == "2 days" ~ 2,
df1$LengthOfStay == "3 days" ~ 3,
df1$LengthOfStay == "4 days" ~ 4,
df1$LengthOfStay == "5 days" ~ 5,
df1$LengthOfStay == "6 days" ~ 6,
df1$LengthOfStay == "1- 2 weeks" ~ 11,
df1$LengthOfStay == "2- 4 weeks" ~ 21,
df1$LengthOfStay == "4- 8 weeks" ~ 42,
df1$LengthOfStay == "26+ weeks" ~ 182,
TRUE~0
)
summary(LengthOfStay)
str(LengthOfStay)
attach(df1)
str(LengthOfStay)
str(df1)
df1$LengthOfStay <- as.integer(df1$LengthOfStay)
attach(df1)
str(LengthOfStay)
unique(CharlsonIndex)
unique(ProcedureGroup)
# fixing drug count
df1$DrugCount[df1$DrugCount == "7+"] <- 7
df1$DrugCount[is.na(df1$DrugCount)] <- 0
df1$DrugCount<- as.integer(df1$DrugCount)
str(df1$DrugCount)
summary(df1$DrugCount)
attach(df1)
str(df1)
# fixing the lab count
df1$LabCount[df1$LabCount == "10+"] <- 10
df1$LabCount[is.na(df1$LabCount)]<- 0
df1$LabCount<- as.integer(df1$LabCount)
str(df1$LabCount)
summary(df1$LabCount)
# fixing the age - taking the median of the age range
# 99 represents missing value
df1$AgeAtFirstClaim<- case_when(
df1$AgeAtFirstClaim == "0-9" ~ 5,
df1$AgeAtFirstClaim == "10-19" ~ 15,
df1$AgeAtFirstClaim == "20-29" ~ 25,
df1$AgeAtFirstClaim == "30-39" ~ 35,
df1$AgeAtFirstClaim == "40-49" ~ 45,
df1$AgeAtFirstClaim == "50-59" ~ 55,
df1$AgeAtFirstClaim == "60-69" ~ 65,
df1$AgeAtFirstClaim == "70-79" ~ 75,
df1$AgeAtFirstClaim == "80+" ~ 80,
TRUE~ 99
)
summary(df1$AgeAtFirstClaim)
str(df1$AgeAtFirstClaim)
df1$AgeAtFirstClaim<- as.integer(df1$AgeAtFirstClaim)
str(df1$AgeAtFirstClaim)
# fixing the sex
df1$Sex[is.na(df1$Sex)]<- "Missing_Sex"
str(Sex)
str(df1$Sex)
#checking for any more null values
sapply(df1, function(x) sum(is.na(x)))
# fixing the missing values in categorical variables
df1$ProviderID[is.na(df1$ProviderID)]<- "Missing_ProviderID"
df1$Vendor[is.na(df1$Vendor)]<- "Missing_Vendor"
df1$PCP[is.na(df1$PCP)]<- "Missing_PCP"
df1$Specialty[is.na(df1$Specialty)]<- "Missing_Specialty"
df1$PlaceSvc[is.na(df1$PlaceSvc)]<- "Missing_PlaceSvc"
df1$PrimaryConditionGroup[is.na(df1$PrimaryConditionGroup)]<- "Missing_PCGroup"
df1$ProcedureGroup[is.na(df1$ProcedureGroup)]<- "Missing_ProcedureGroup"
str(df1)
################################ Prelim look at the data ###############################
str(df2) #overview of data types
############ YEAR 2 ####################################################################
########################################################################################
#load in dataset
DIH_21_Target <- read_csv("DIH_Y2_Target")
############ YEAR 2 ####################################################################
########################################################################################
#load in dataset
DIH_2_Target <- read_csv("DIH_Y2_Target")
df2<- DIH_Y2_Target
############ YEAR 2 ####################################################################
########################################################################################
#load in dataset
DIH_Y2_Target <- read_csv("DIH_Y2_Target")
df2<- DIH_Y2_Target
################################ Prelim look at the data ###############################
str(df2) #overview of data types
colnames(df2)
summary(df2) #summary statistics
dim(df2)
sapply(df2, function(x) sum(is.na(x))) # of missing variables
length(unique(df2$MemberID)) #76038 unique patients
################# Data Manipulation #####################
# fixing DSFS - days since first claim
df2$DSFS <- case_when(
df2$DSFS == "0- 1 month" ~ 1,
df2$DSFS == "1- 2 months" ~ 2,
df2$DSFS == "2- 3 months" ~ 3,
df2$DSFS == "3- 4 months" ~ 4,
df2$DSFS == "4- 5 months" ~ 5,
df2$DSFS == "5- 6 months" ~ 6,
df2$DSFS == "6- 7 months" ~ 7,
df2$DSFS == "7- 8 months" ~ 8,
df2$DSFS == "8- 9 months" ~ 9,
df2$DSFS == "9-10 months" ~ 10,
df2$DSFS == "10-11 months" ~ 11,
df2$DSFS == "11-12 months" ~ 12,
TRUE~0
)
#sanity check
summary(df2$DSFS)
#fixing payDelay
unique(df2$PayDelay)
str(df2)
#converting pseudonyms for EDA later on
df2$MemberID <- as.character(df2$MemberID)
df2$ProviderID <- as.character(df2$ProviderID)
df2$Vendor <- as.character(df2$Vendor)
df2$PCP <- as.character(df2$PCP)
#fixing payDelay
unique(df2$PayDelay)
df2$PayDelay[df2$PayDelay == "162+"] <- 162
df2$PayDelay<- as.integer(df2$PayDelay)
str(df2$PayDelay)
# fixing length of stay
df2$LengthOfStay<- case_when(
df2$LengthOfStay == "1 day" ~ 1,
df2$LengthOfStay == "2 days" ~ 2,
df2$LengthOfStay == "3 days" ~ 3,
df2$LengthOfStay == "4 days" ~ 4,
df2$LengthOfStay == "5 days" ~ 5,
df2$LengthOfStay == "6 days" ~ 6,
df2$LengthOfStay == "1- 2 weeks" ~ 11,
df2$LengthOfStay == "2- 4 weeks" ~ 21,
df2$LengthOfStay == "4- 8 weeks" ~ 42,
df2$LengthOfStay == "26+ weeks" ~ 182,
TRUE~0
)
summary(df2$LengthOfStay)
df2$LengthOfStay <- as.integer(df2$LengthOfStay)
str(df1$LengthOfStay)
# fixing drug count
df2$DrugCount[df2$DrugCount == "7+"] <- 7
df2$DrugCount[is.na(df2$DrugCount)]<- 0
df2$DrugCount<- as.integer(df2$DrugCount)
str(df2$DrugCount)
summary(df2$DrugCount)
# fixing the lab count
df2$LabCount[df2$LabCount == "10+"] <- 10
df2$LabCount[is.na(df2$LabCount)]<- 0
df2$LabCount<- as.integer(df2$LabCount)
str(df2$LabCount)
summary(df2$LabCount)
# fixing the age - changing NAs to 99
df2$AgeAtFirstClaim<- case_when(
df2$AgeAtFirstClaim == "0-9" ~ 5,
df2$AgeAtFirstClaim == "10-19" ~ 15,
df2$AgeAtFirstClaim == "20-29" ~ 25,
df2$AgeAtFirstClaim == "30-39" ~ 35,
df2$AgeAtFirstClaim == "40-49" ~ 45,
df2$AgeAtFirstClaim == "50-59" ~ 55,
df2$AgeAtFirstClaim == "60-69" ~ 65,
df2$AgeAtFirstClaim == "70-79" ~ 75,
df2$AgeAtFirstClaim == "80+" ~ 80,
TRUE~ 99
)
summary(df2$AgeAtFirstClaim)
df2$AgeAtFirstClaim<- as.integer(df2$AgeAtFirstClaim)
str(df2$AgeAtFirstClaim)
# fixing the sex variable
df2$Sex[is.na(df2$Sex)]<- "Missing_Sex"
#checking for any more null values
sapply(df1, function(x) sum(is.na(x)))
#checking for any more null values
sapply(df2, function(x) sum(is.na(x)))
# fixing the missing values in categorical variables ( leaving ProviderID, Vendor and PCP as integer only)
df2$ProviderID[is.na(df2$ProviderID)]<- "Missing_ProviderID"
# fixing the missing values in categorical variables ( leaving ProviderID, Vendor and PCP as integer only)
df2$ProviderID[is.na(df2$ProviderID)]<- "Missing_ProviderID"
df2$Vendor[is.na(df2$Vendor)]<- "Missing_Vendor"
df2$PCP[is.na(df1$PCP)]<- "Missing_PCP"
df2$Specialty[is.na(df2$Specialty)]<- "Missing_Specialty"
df2$PlaceSvc[is.na(df2$PlaceSvc)]<- "Missing_PlaceSvc"
df2$PrimaryConditionGroup[is.na(df2$PrimaryConditionGroup)]<- "Missing_PCGroup"
df2$ProcedureGroup[is.na(df2$ProcedureGroup)]<- "Missing_ProcedureGroup"
#checking for any more null values
sapply(df2, function(x) sum(is.na(x)))
df2$PCP[is.na(df2$PCP)]<- "Missing_PCP"
#checking for any more null values
sapply(df2, function(x) sum(is.na(x)))
#checking for any more null values
sapply(df1, function(x) sum(is.na(x)))
str(df2)
################################ Exploratory Data Analysis #################################
ggplot(df1, aes(DSFS)) + geom_histogram(binwidth = 1) + ggtitle("DSFS") +xlab("DSFS")
if(!(require(ggplot2))) install.packages("ggplot2")
################################ Exploratory Data Analysis #################################
ggplot(df1, aes(DSFS)) + geom_histogram(binwidth = 1) + ggtitle("DSFS") +xlab("DSFS")
table(df1$DSFS, df1$DaysInHospital)
table(df1$DSFS, mean(df1$DaysInHospital)
table(df1$DSFS, mean(df1$DaysInHospital))
ggplot(df1, aes(DSFS,DaysInHospital)) + geom_point() + xlab("DSFS") + xlab("DaysInHospital")
#ProviderID
ggplot(df1, aes(ProviderID)) + geom_bar(stat="count") + xlab("ProviderID")
unique(ProviderID)
count(unique(ProviderID))
unique(df1$Vendor)
unique(df$PCP)
unique(df1$PCP)
unique(Specialty)
#Specialty
ggplot(df1, aes(Specialty)) + geom_bar(stat="count") + xlab("Specialty")
#Specialty
ggplot(df1, aes(Specialty)) + geom_bar(stat="count") + xlab("Specialty") + coord_flip()
str(df1$DaysInHospital)
unique(df1$PlaceSvc)
#PlaceSvc
ggplot(df1, aes(PlaceSvc)) + geom_bar(stat="count") + xlab("PlaceSvc") + coord_flip()
#PayDelay
ggplot(df1, aes(PayDelay)) + geom_histogram() + ggtitle("PayDelay") + xlab("PayDelay")
#PayDelay
ggplot(df1, aes(PayDelay)) + geom_histogram(binwidth = 5) + ggtitle("PayDelay") + xlab("PayDelay")
#PayDelay
ggplot(df1, aes(PayDelay)) + geom_histogram(binwidth = 10) + ggtitle("PayDelay") + xlab("PayDelay")
#Length of Stay
ggplot(df1, aes(LengthOfStay)) + geom_histogram() + ggtitle("LengthOfStay") + xlab("LengthOfStay")
stem(df1$LengthOfStay)
unique(df1$PrimaryConditionGroup)
unique(CharlsonIndex)
#CharlsonIndex
ggplot(df1, aes(CharlsonIndex)) + geom_bar(stat="count") + xlab("CharlsonIndex")
unique(ProcedureGroup)
#Drug Count
ggplot(df1, aes(DrugCount)) + geom_histogram() + ggtitle("DrugCount") + xlab("DrugCount")
#Drug Count
ggplot(df1, aes(DrugCount)) + geom_bar(state="count") + ggtitle("DrugCount") + xlab("DrugCount")
#Drug Count
ggplot(df1, aes(DrugCount)) + geom_bar(stat="count") + ggtitle("DrugCount") + xlab("DrugCount")
#Lab Count
ggplot(df1, aes(LabCount)) + geom_bar(stat="count") + ggtitle("LabCount") + xlab("LabCount")
#Age
ggplot(df1, aes(AgeAtFirstClaim)) + geom_histogram(binwidth = 10) + ggtitle("AgeAtFirstClaim") + xlab("AgeAtFirstClaim")
#Age
ggplot(df1, aes(AgeAtFirstClaim)) + geom_histogram(binwidth = 5) + ggtitle("AgeAtFirstClaim") + xlab("AgeAtFirstClaim")
#Age
ggplot(df1, aes(AgeAtFirstClaim)) + geom_histogram(binwidth = 10) + ggtitle("AgeAtFirstClaim") + xlab("AgeAtFirstClaim")
#Sex
ggplot(df1, aes(Sex)) + geom_bar(stat="count") + ggtitle("Sex") + xlab("Sex")
#DaysInHospital
ggplot(df1, aes(DaysInHospital)) + geom_bar(stat="count") + ggtitle("DaysInHospital") + xlab("DaysInHospital")
type(df1)
str(df1)
###################### Correlations ###############################################
#pulling out numerical variables
num_df1 <- db[,c("DFSF", "PayDelay","LengthOfStay","SupLOS","DrugCount","LabCount","AgeAtFirstClaim",
"ClaimsTruncated","DaysInHospital")]
###################### Correlations ###############################################
#pulling out numerical variables
num_df1 <- df1[,c("DFSF", "PayDelay","LengthOfStay","SupLOS","DrugCount","LabCount","AgeAtFirstClaim",
"ClaimsTruncated","DaysInHospital")]
###################### Correlations ###############################################
#pulling out numerical variables
num_df1 <- df1[,c("DSFS", "PayDelay","LengthOfStay","SupLOS","DrugCount","LabCount","AgeAtFirstClaim",
"ClaimsTruncated","DaysInHospital")]
corr <- round(cor(num_df1, use="all.obs", method = "pearson"),5)
corr
ggcorrplot(corr,tl.cex = 6, tl.srt = 90)
############### YEAR 1 ################################################################
#######################################################################################
#load in dataset
DIH_Y1_Target <- read_csv("DIH_Y1_Target")
if(!require(ggcorrplot)) install.packages("ggcorrplot")
ggcorrplot(corr,tl.cex = 6, tl.srt = 90)
ggcorrplot(corr,tl.cex = 6, tl.srt = 90) + ggtitle("Correlation of Numerical Variables")
ggplot(df1, aes(Specialty,DaysInHospital, group=Specialty)) + geom_boxplot(outlier.size = 1, aes(fill=Specialty)) +
xlab("Specialty") + ylab("DaysInHospital")
?xyTable
AA <- xyTable(df1$AgeAtFirstClaim,df1$DaysInHospital)
coeff_bigger <- 2
plot(AA$x, AA$y, cex=AA$number*coeff_bigger, pch=16, col=rgb(0,0,1,0.5), xlab= "value of Age" , ylab="value of DaysInHospital",
xlim=c(0,6), ylim=c(0,6) )
text(AA$x , AA$y , AA$number )
ggplot(df1,aes(AgeAtFirstClaim,DaysInHospital)) + geom_jitter()
ggplot(df1,aes(AgeAtFirstClaim,DrugCount)) + geom_jitter()
##########################################################################################
# before output to python lets fix char variable to int
df_python <- df1
str(df_python)
df_python$ProviderID<- as.numeric(df_python$ProviderID)
View(df1)
df_python$Vendor<- as.numeric(df_python$Vendor)
df_python$PCP<- as.numeric(df_python$PCP)
sapply(df1, function(x) sum(is.na(x))) # of missing variables
sapply(df_python, function(x) sum(is.na(x))) # of missing variables
View(df_python)
#output a csv to try in creating dummy /aggreagation in python
# Write CSV in R
write.csv(df_python, file = "Dummy1.csv")
df2<- DIH_Y2_Target
################# Data Manipulation #####################
# fixing DSFS - days since first claim
df2$DSFS <- case_when(
df2$DSFS == "0- 1 month" ~ 1,
df2$DSFS == "1- 2 months" ~ 2,
df2$DSFS == "2- 3 months" ~ 3,
df2$DSFS == "3- 4 months" ~ 4,
df2$DSFS == "4- 5 months" ~ 5,
df2$DSFS == "5- 6 months" ~ 6,
df2$DSFS == "6- 7 months" ~ 7,
df2$DSFS == "7- 8 months" ~ 8,
df2$DSFS == "8- 9 months" ~ 9,
df2$DSFS == "9-10 months" ~ 10,
df2$DSFS == "10-11 months" ~ 11,
df2$DSFS == "11-12 months" ~ 12,
TRUE~0
)
#sanity check
summary(df2$DSFS)
#converting pseudonyms for EDA later on
df2$MemberID <- as.character(df2$MemberID)
#fixing payDelay
unique(df2$PayDelay)
df2$PayDelay[df2$PayDelay == "162+"] <- 162
df2$PayDelay<- as.integer(df2$PayDelay)
str(df2$PayDelay)
# fixing length of stay
df2$LengthOfStay<- case_when(
df2$LengthOfStay == "1 day" ~ 1,
df2$LengthOfStay == "2 days" ~ 2,
df2$LengthOfStay == "3 days" ~ 3,
df2$LengthOfStay == "4 days" ~ 4,
df2$LengthOfStay == "5 days" ~ 5,
df2$LengthOfStay == "6 days" ~ 6,
df2$LengthOfStay == "1- 2 weeks" ~ 11,
df2$LengthOfStay == "2- 4 weeks" ~ 21,
df2$LengthOfStay == "4- 8 weeks" ~ 42,
df2$LengthOfStay == "26+ weeks" ~ 182,
TRUE~0
)
summary(df2$LengthOfStay)
df2$LengthOfStay <- as.integer(df2$LengthOfStay)
str(df1$LengthOfStay)
# fixing drug count
df2$DrugCount[df2$DrugCount == "7+"] <- 7
df2$DrugCount[is.na(df2$DrugCount)]<- 0
df2$DrugCount<- as.integer(df2$DrugCount)
str(df2$DrugCount)
summary(df2$DrugCount)
# fixing the lab count
df2$LabCount[df2$LabCount == "10+"] <- 10
df2$LabCount[is.na(df2$LabCount)]<- 0
df2$LabCount<- as.integer(df2$LabCount)
str(df2$LabCount)
summary(df2$LabCount)
# fixing the age - changing NAs to 99
df2$AgeAtFirstClaim<- case_when(
df2$AgeAtFirstClaim == "0-9" ~ 5,
df2$AgeAtFirstClaim == "10-19" ~ 15,
df2$AgeAtFirstClaim == "20-29" ~ 25,
df2$AgeAtFirstClaim == "30-39" ~ 35,
df2$AgeAtFirstClaim == "40-49" ~ 45,
df2$AgeAtFirstClaim == "50-59" ~ 55,
df2$AgeAtFirstClaim == "60-69" ~ 65,
df2$AgeAtFirstClaim == "70-79" ~ 75,
df2$AgeAtFirstClaim == "80+" ~ 80,
TRUE~ 99
)
summary(df2$AgeAtFirstClaim)
df2$AgeAtFirstClaim<- as.integer(df2$AgeAtFirstClaim)
str(df2$AgeAtFirstClaim)
# fixing the sex variable
df2$Sex[is.na(df2$Sex)]<- "Missing_Sex"
#checking for any more null values
sapply(df2, function(x) sum(is.na(x)))
# fixing the missing values in categorical variables ( leaving ProviderID, Vendor and PCP as integer only)
df2$ProviderID[is.na(df2$ProviderID)]<- "Missing_ProviderID"
df2$Vendor[is.na(df2$Vendor)]<- "Missing_Vendor"
df2$PCP[is.na(df2$PCP)]<- "Missing_PCP"
df2$Specialty[is.na(df2$Specialty)]<- "Missing_Specialty"
df2$PlaceSvc[is.na(df2$PlaceSvc)]<- "Missing_PlaceSvc"
df2$PrimaryConditionGroup[is.na(df2$PrimaryConditionGroup)]<- "Missing_PCGroup"
df2$ProcedureGroup[is.na(df2$ProcedureGroup)]<- "Missing_ProcedureGroup"
str(df2)
df_python2 <- df2
str(df_python2)
df_python2$ProviderID<- as.numeric(df_python2$ProviderID)
df_python2$Vendor<- as.numeric(df_python2$Vendor)
df_python2$PCP<- as.numeric(df_python2$PCP)
sapply(df_python, function(x) sum(is.na(x)))
# Write CSV in R
write.csv(df_python, file = "Dummy2.csv")
#dropping Year column
df1$Year <- NULL
##########################################################################################
# before output to python lets fix char variable to int
df_python <- df1
str(df_python)
df_python$ProviderID<- as.integer(df_python$ProviderID)
df_python$Vendor<- as.integer(df_python$Vendor)
df_python$PCP<- as.integer(df_python$PCP)
sapply(df_python, function(x) sum(is.na(x))) # of missing variables
#output a csv to try in creating dummy /aggreagation in python
# Write CSV in R
write.csv(df_python, file = "Dummy1.csv")
View(df1)
