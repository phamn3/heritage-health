#change admission source id to categorical
db$admission_source_id <- as.factor(db$admission_source_id)
#Checking percentages of "?" category in some variables --> i.e. data was missing
(sum(race == "?")/nrow(db))*100
#duplicates in encounter_id or patient_nbr?
anyDuplicated(encounter_id) #no
anyDuplicated(patient_nbr) #yes - about 80
patient_nbr[duplicated(patient_nbr)] #look at the duplicated elements
db <- db[!duplicated(db$patient_nbr),] #remove duplicated elements
#drop columns with low to none variance --> won't help in predicting
db$metformin.piglitazone <- NULL
db$metformin.rosiglitazone <- NULL
db$glimepiride.pioglitazone <- NULL
db$glipizide.metformin <- NULL
db$citoglipton <- NULL
db$examide <- NULL
db$troglitazone <- NULL
db$acetohexamide <- NULL
#drop diag_2 and diag_3 columns...will only use diag_1 for modeling
db$diag_2 <- NULL
db$diag_3 <- NULL
#recoding diagnosis column to reduce levels
#first compute to numeric
db$diag_1 <- as.numeric(db$diag_1)
#create new variable
db$diag_1 <- case_when(
db$diag_1 >= 1 & db$diag_1 <= 139 ~ 1,
db$diag_1 >= 140 & db$diag_1 <= 239 ~ 2,
db$diag_1 >= 240 & db$diag_1 < 250 | db$diag_1 >= 251 & db$diag_1 <= 279 ~ 3,
db$diag_1 >= 250 & db$diag_1 < 251 ~ 4,
db$diag_1 >= 280 & db$diag_1 <= 289 ~ 5,
db$diag_1 >= 290 & db$diag_1 <= 319 ~ 6,
db$diag_1 >= 320 & db$diag_1 <= 359 ~ 7,
db$diag_1 >= 360 & db$diag_1 <= 389 ~ 8,
db$diag_1 >= 390 & db$diag_1 <= 459 | db$diag_1 == 785 ~ 9,
db$diag_1 >= 460 & db$diag_1 <= 519 | db$diag_1 == 786 ~ 10,
db$diag_1 >= 520 & db$diag_1 <= 579 | db$diag_1 == 787 ~ 11,
db$diag_1 >= 580 & db$diag_1 <= 629 | db$diag_1 == 788 ~ 12,
db$diag_1 >= 710 & db$diag_1 <= 739 ~ 13,
db$diag_1 >= 800 & db$diag_1 <= 999 ~ 14,
TRUE ~ 15
)
#turn back into factors
db$diag_1 <- as.factor(db$diag_1)
table(diag_1)
#turn back into factors
attach(db)
db$diag_1 <- as.factor(db$diag_1)
table(diag_1)
######################### PLOTS ####################################################################
#diag_1 with readmitted
ggplot(db, aes(diag_1,fill=readmitted)) + geom_bar(position="stack")
#recoding admitted variable
db$readmitted <- ifelse(db$readmitted == "<30", "1", "0")
db$readmitted <- as.factor(db$readmitted)
######################### PLOTS ####################################################################
#diag_1 with readmitted
ggplot(db, aes(diag_1,fill=readmitted)) + geom_bar(position="stack")
table(diag_1)
8836/nrows(db)
8836/nrow(db)
5788/nrow(db)
16726/nrow(db)
9/nrow(db)
4066/nrow(db)
1512/nrow(db)
6533/nrow(db)
3761/nrow(db)
6473/nrow(db)
5798/nrow(db)
8280/nrow(db)
421/nrow(db)
795/nrow(db)
2520/nrow(db)
#turn back into factors
attach(db)
table(diag_1, readmitted)
unique(medical_specialty)
############################ Looking at Statistics & Correlations################################
#pulling out numerical variables
num_db <- db[,c("time_in_hospital","num_lab_procedures","num_procedures","num_medications",
"number_outpatient","number_emergency","number_inpatient","number_diagnoses")]
#pulling out factor variables
fact_ind <- sapply(db,is.factor)
fact_db <- db[,fact_ind]
#Pearson's correlation - numerical variables
corr <- round(cor(num_db, use="all.obs", method = "pearson"),5)
corr
ggcorrplot(corr,tl.cex = 6, tl.srt = 90)
if(!require(stats)) install.packages("stats")
if(!require(stats)) install.packages("stats")
require(stats)
library("stats", lib.loc="C:/Program Files/R/R-3.4.2/library")
attach(db)
chisq.test(diag_1,readmitted)
#Chi Square Tests --> can also be used as a feature selection
chisq.test(race,readmitted)
chisq.test(gender,readmitted)
chisq.test(age,readmitted)
chisq.test(admission_type_id,readmitted)
chisq.test(A1Cresult,readmitted)
chisq.test(insulin,readmitted)
############################# Feature Selection Methods ###########################################
# Recursive Feature Elimination (RFE)
set.seed(1)
ctrl <- rfeControl(functions=rfFuncs, method="cv", number=10) #using RF selection function
results <- rfe(db[,1:39], db[,40], sizes=c(1:439), rfeControl=ctrl)
unique(medical_specialty)
############################# Feature Selection Methods ###########################################
db1 <- db
db1$medical_specialty <- NULL
# Recursive Feature Elimination (RFE)
set.seed(1)
ctrl <- rfeControl(functions=rfFuncs, method="cv", number=10) #using RF selection function
ctrl <- rfeControl(functions=rfFuncs, method="cv", number=10) #using RF selection function
results <- rfe(db[,1:38], db[,39], sizes=c(1:38), rfeControl=ctrl)
install.packages("Boruta")
if(!require(Boruta)) install.packages("Boruta")
#Boruta Package - Wrapper Method for Feature Selection
set.seed(1)
bor_res <- Boruta(readmitted~.,data=db,doTrace=2)
print(bor_res)
print(getSelectedAttributes(bor_res))
plot(bor_res, las=2, cex.axis=0.75)
#get stats of the variables
stats <-attStats(bor_res)
print(stats)
#Chi Square Test on two Tentative attributes
chisq.test(pioglitazone,readmitted)
chisq.test(tolazamide,readmitted)
#subset out working dataset
new_db <- db[,c("race","age","admission_type_id","discharge_disposition_id","admission_source_id",
"time_in_hospital","payer_code","medical_specialty","num_lab_procedures","num_procedures",
"num_medications","number_outpatient","number_emergency","number_inpatient","diag_1",
"number_diagnoses","max_glu_serum","A1Cresult","metformin","insulin","change","diabetesMed")]
View(new_db)
#subset out working dataset
new_db <- db[,c("race","age","admission_type_id","discharge_disposition_id","admission_source_id",
"time_in_hospital","payer_code","medical_specialty","num_lab_procedures","num_procedures",
"num_medications","number_outpatient","number_emergency","number_inpatient","diag_1",
"number_diagnoses","max_glu_serum","A1Cresult","metformin","insulin","change","diabetesMed",
"readmitted")]
View(new_db)
############################ Train/Test Split ####################################################
#createDataPartition maintains ratio of dependent variable in train and test datasets
set.seed(1)
train_ind <- createDataPartition(y = new_db$readmitted, p=0.75, list=FALSE)
train <- new_db[train_ind, ]
test <- new_db[-train_ind, ]
#check to see if ratios are maintained
table(train$readmitted)
table(test$readmitted)
################################ Modelling #######################################################
# 1. Logistic Regression
set.seed(1)
lg_mod <- glm(readmitted~., family=binomial(link='logit'),data=train)
summary(lg_mod)
#predictions with probabilities
lg_pred <- predict(lg_mod, newdata=test[,-23], type="response")
lg_auc <- auc(test$readmitted, lg_pred)
library("pROC", lib.loc="~/R/win-library/3.4")
lg_auc <- auc(test$readmitted, lg_pred)
#predictions with probabilities
lg_pred <- predict(lg_mod, newdata=test[,-23], type="response")
####### 2. Random Forest
set.seed(1)
rf_mod <- randomForest(readmitted~., data=train)
library("randomForest", lib.loc="~/R/win-library/3.4")
####### 2. Random Forest
set.seed(1)
rf_mod <- randomForest(readmitted~., data=train)
str(train)
str(test)
table(medical_specialty)
############################# Last Minute Recode of Medical Specialty#################################
#Random Forest cannot take variables with more than 53 categories
#recode
new_db$medical_specialty <- case_when(
new_db$medical_specialty == "?" ~ "Missing",
new_db$medical_specialty == "Cardiology" ~ "Cardiology",
new_db$medical_specialty == "Emergency/Trauma" ~ "Emergency/Trauma",
new_db$medical_specialty == "Family/GeneralPractice" ~ "GeneralPractice",
new_db$medical_specialty == "InternalMedicine" ~ "InternalMedicine",
new_db$medical_specialty == "Orthopedics" ~ "Orthopedics",
new_db$medical_specialty == "Orthopedics-Reconstructive" ~ "Orthopedics-Reconstructive",
new_db$medical_specialty == "Surgery-General" | new_db$medical_specialty == "Surgeon" |
new_db$medical_specialty == "Surgery-Cardiovascular" | new_db$medical_specialty == "Surgery-Cardiovascular/Thoracic" |
new_db$medical_specialty == "Surgery-Colon&Rectal" | new_db$medical_specialty == "Surgery-Neuro" |
new_db$medical_specialty == "Surgery-Maxillofacial" | new_db$medical_specialty == "Surgery-Plastic" |
new_db$medical_specialty == "Surgery-PlasticwithinHeadandNeck" | new_db$medical_specialty == "Surgery-Thoracic" |
new_db$medical_specialty == "Surgery-Vascular" | new_db$medical_specialty == "SurgicalSpecialty" ~ "Surgery",
TRUE ~ "Other"
)
str(new_db)
attach(new_db)
new_db$medical_specialty <- as.factor(new_db$medical_specialty)
str(new_db)
unique(new_db$medical_specialty)
table(new_db$medical_specialty)
############################# Last Minute Recode of Medical Specialty#################################
#Random Forest cannot take variables with more than 53 categories
#recode
new_db$medical_specialty <- case_when(
new_db$medical_specialty == "?" ~ "Missing",
new_db$medical_specialty == "Cardiology" ~ "Cardiology",
new_db$medical_specialty == "Emergency/Trauma" ~ "Emergency/Trauma",
new_db$medical_specialty == "Family/GeneralPractice" ~ "GeneralPractice",
new_db$medical_specialty == "InternalMedicine" ~ "InternalMedicine",
new_db$medical_specialty == "Orthopedics" ~ "Orthopedics",
new_db$medical_specialty == "Orthopedics-Reconstructive" ~ "Orthopedics-Reconstructive",
new_db$medical_specialty == "Surgery-General" | new_db$medical_specialty == "Surgeon" |
new_db$medical_specialty == "Surgery-Cardiovascular" | new_db$medical_specialty == "Surgery-Cardiovascular/Thoracic" |
new_db$medical_specialty == "Surgery-Colon&Rectal" | new_db$medical_specialty == "Surgery-Neuro" |
new_db$medical_specialty == "Surgery-Maxillofacial" | new_db$medical_specialty == "Surgery-Pediatric" | new_db$medical_specialty == "Surgery-Plastic" |
new_db$medical_specialty == "Surgery-PlasticwithinHeadandNeck" | new_db$medical_specialty == "Surgery-Thoracic" |
new_db$medical_specialty == "Surgery-Vascular" | new_db$medical_specialty == "SurgicalSpecialty" ~ "Surgery",
TRUE ~ "Other"
)
new_db$medical_specialty <- as.factor(new_db$medical_specialty)
str(new_db)
unique(new_db$medical_specialty)
table(new_db$medical_specialty)
#subset out working dataset
new_db <- db[,c("race","age","admission_type_id","discharge_disposition_id","admission_source_id",
"time_in_hospital","payer_code","medical_specialty","num_lab_procedures","num_procedures",
"num_medications","number_outpatient","number_emergency","number_inpatient","diag_1",
"number_diagnoses","max_glu_serum","A1Cresult","metformin","insulin","change","diabetesMed",
"readmitted")]
View(new_db)
attach(new_db)
############################# Last Minute Recode of Medical Specialty#################################
#Random Forest cannot take variables with more than 53 categories
#recode
new_db$medical_specialty <- case_when(
new_db$medical_specialty == "?" ~ "Missing",
new_db$medical_specialty == "Cardiology" ~ "Cardiology",
new_db$medical_specialty == "Emergency/Trauma" ~ "Emergency/Trauma",
new_db$medical_specialty == "Family/GeneralPractice" ~ "GeneralPractice",
new_db$medical_specialty == "InternalMedicine" ~ "InternalMedicine",
new_db$medical_specialty == "Orthopedics" ~ "Orthopedics",
new_db$medical_specialty == "Orthopedics-Reconstructive" ~ "Orthopedics-Reconstructive",
new_db$medical_specialty == "Surgery-General" | new_db$medical_specialty == "Surgeon" |
new_db$medical_specialty == "Surgery-Cardiovascular" | new_db$medical_specialty == "Surgery-Cardiovascular/Thoracic" |
new_db$medical_specialty == "Surgery-Colon&Rectal" | new_db$medical_specialty == "Surgery-Neuro" |
new_db$medical_specialty == "Surgery-Maxillofacial" | new_db$medical_specialty == "Surgery-Pediatric" | new_db$medical_specialty == "Surgery-Plastic" |
new_db$medical_specialty == "Surgery-PlasticwithinHeadandNeck" | new_db$medical_specialty == "Surgery-Thoracic" |
new_db$medical_specialty == "Surgery-Vascular" | new_db$medical_specialty == "SurgicalSpecialty" ~ "Surgery",
TRUE ~ "Other"
)
new_db$medical_specialty <- as.factor(new_db$medical_specialty)
str(new_db)
unique(new_db$medical_specialty)
table(new_db$medical_specialty)
############################ Train/Test Split ####################################################
#createDataPartition maintains ratio of dependent variable in train and test datasets
set.seed(1)
train_ind <- createDataPartition(y = new_db$readmitted, p=0.75, list=FALSE)
train <- new_db[train_ind, ]
test <- new_db[-train_ind, ]
#check to see if ratios are maintained
table(train$readmitted)
table(test$readmitted)
####### 2. Random Forest
set.seed(1)
rf_mod <- randomForest(readmitted~., data=train)
print(rf_mod) #print results
importance(rf_mod) #look at importance of predictors
#predictions with probabilities
rf_pred <- predict(rf_mod, newdata=test[,-23], type="prob")
rf_auc <- auc(test$readmitted, rf_pred[,2])
plot(roc(test$readmitted,rf_pred[,2]), main="ROC of Random Forest")
rf_auc
################################ Modelling #######################################################
# 1. Logistic Regression
set.seed(1)
lg_mod <- glm(readmitted~., family=binomial(link='logit'),data=train)
summary(lg_mod)
#predictions with probabilities
lg_pred <- predict(lg_mod, newdata=test[,-23], type="response")
if(!(require(gmodels))) install.packages("gmodels")
require(class)
####### 3. Knn #####################
set.seed(1)
knn_pred <- knn(train = train[-23], test = test[-23], train[,23], k=2)
summary(knn_pred)
sum(is.na(new_db))
table(new_db$medical_specialty)
?predict
####### 1. Decision Trees
set.seed(1)
####### 1. Decision Trees
set.seed(1)
####### 1. Decision Trees
set.seed(1)
tree_mod <- rpart(readmitted~., method="class", data=train)
library("rpart", lib.loc="C:/Program Files/R/R-3.4.2/library")
####### 1. Decision Trees
set.seed(1)
tree_mod <- rpart(readmitted~., method="class", data=train)
summary(tree_mod) #summary of splits
printcp(tree_mod) #display results
plotcp(tree_mod) #visualize cross validation results
fancyRpartPlot(tree_mod)
require(rattle)
fancyRpartPlot(tree_mod)
#predictions with probabilitys - AUC and ROC
tree_pred <- predict(tree_mod,newdata = test[,-23], type="prob")
tree_auc <- auc(test$readmitted,tree_pred[,2])
plot(roc(test$readmitted,tree_pred[,2]), main="ROC of Decision Trees")
tree_auc
varImpPlot(rf_mod)
importance(rf_mod) #look at importance of predictors
importance(rf_mod) #look at importance of predictors
print(rf_mod) #print results
importance(rf_mod) #look at importance of predictors
varImpPlot(rf_mod)
str(new_db)
#Random Forest cannot take variables with more than 53 categories
#recode
db$medical_specialty <- case_when(
db$medical_specialty == "?" ~ "Missing",
db$medical_specialty == "Cardiology" ~ "Cardiology",
db$medical_specialty == "Emergency/Trauma" ~ "Emergency/Trauma",
db$medical_specialty == "Family/GeneralPractice" ~ "GeneralPractice",
db$medical_specialty == "InternalMedicine" ~ "InternalMedicine",
db$medical_specialty == "Orthopedics" ~ "Orthopedics",
db$medical_specialty == "Orthopedics-Reconstructive" ~ "Orthopedics-Reconstructive",
db$medical_specialty == "Surgery-General" | db$medical_specialty == "Surgeon" |
db$medical_specialty == "Surgery-Cardiovascular" | db$medical_specialty == "Surgery-Cardiovascular/Thoracic" |
db$medical_specialty == "Surgery-Colon&Rectal" | db$medical_specialty == "Surgery-Neuro" |
db$medical_specialty == "Surgery-Maxillofacial" | db$medical_specialty == "Surgery-Pediatric" | db$medical_specialty == "Surgery-Plastic" |
db$medical_specialty == "Surgery-PlasticwithinHeadandNeck" | db$medical_specialty == "Surgery-Thoracic" |
db$medical_specialty == "Surgery-Vascular" | db$medical_specialty == "SurgicalSpecialty" ~ "Surgery",
TRUE ~ "Other"
)
db$medical_specialty <- as.factor(db$medical_specialty)
str(db)
unique(db$medical_specialty)
table(db$medical_specialty)
#recode "?" to "Missing"
db$race[db$race == "?"] <- "Missing"
print(db$race)
unique(db$race)
sum(is.na(db$race))
#load in the data
db <- diabetic_data
################################ Prelim look at the data ###########################################
attach(db)
################### Cleaning the Data ##############################################################
#impute 3 'Unknown/Invalid' genders with 'Female' since that is the majority class
db$gender[db$gender == "Unknown/Invalid"] <- "Female"
sum(db$gender == "Unknown/Invalid") #check to see if imputed correctly
#look at the weight column
(sum(weight == "?")/nrow(db))*100
#96% of weight columns has missing data, will remove this column
db <- db[,-6]
head(db)
#turn age variable into ordinal categorical variable
is.ordered(age) #checking to see if ordered - no
db$age <- as.ordered(db$age)
db$age #checked if ordered factor - yes
#change admission_type_id into categorical
db$admission_type_id <- as.factor(db$admission_type_id)
#change discharge disposition to categorical
db$discharge_disposition_id <- as.factor(db$discharge_disposition_id)
#change admission source id to categorical
db$admission_source_id <- as.factor(db$admission_source_id)
#Checking percentages of "?" category in some variables --> i.e. data was missing
(sum(race == "?")/nrow(db))*100
(sum(payer_code == "?")/nrow(db))*100
(sum(medical_specialty == "?")/nrow(db))*100
(sum(diag_1 == "?")/nrow(db))*100
(sum(diag_2 == "?")/nrow(db))*100
(sum(diag_3 == "?")/nrow(db))*100
#duplicates in encounter_id or patient_nbr?
anyDuplicated(encounter_id) #no
anyDuplicated(patient_nbr) #yes - about 80
patient_nbr[duplicated(patient_nbr)] #look at the duplicated elements
db <- db[!duplicated(db$patient_nbr),] #remove duplicated elements
#drop columns with low to none variance --> won't help in predicting
db$metformin.piglitazone <- NULL
db$metformin.rosiglitazone <- NULL
db$glimepiride.pioglitazone <- NULL
db$glipizide.metformin <- NULL
db$citoglipton <- NULL
db$examide <- NULL
db$troglitazone <- NULL
db$acetohexamide <- NULL
#drop diag_2 and diag_3 columns...will only use diag_1 for modeling
db$diag_2 <- NULL
db$diag_3 <- NULL
#recoding diagnosis column to reduce levels
#first compute to numeric
db$diag_1 <- as.numeric(db$diag_1)
#recode
db$diag_1 <- case_when(
db$diag_1 >= 1 & db$diag_1 <= 139 ~ 1,
db$diag_1 >= 140 & db$diag_1 <= 239 ~ 2,
db$diag_1 >= 240 & db$diag_1 < 250 | db$diag_1 >= 251 & db$diag_1 <= 279 ~ 3,
db$diag_1 >= 250 & db$diag_1 < 251 ~ 4,
db$diag_1 >= 280 & db$diag_1 <= 289 ~ 5,
db$diag_1 >= 290 & db$diag_1 <= 319 ~ 6,
db$diag_1 >= 320 & db$diag_1 <= 359 ~ 7,
db$diag_1 >= 360 & db$diag_1 <= 389 ~ 8,
db$diag_1 >= 390 & db$diag_1 <= 459 | db$diag_1 == 785 ~ 9,
db$diag_1 >= 460 & db$diag_1 <= 519 | db$diag_1 == 786 ~ 10,
db$diag_1 >= 520 & db$diag_1 <= 579 | db$diag_1 == 787 ~ 11,
db$diag_1 >= 580 & db$diag_1 <= 629 | db$diag_1 == 788 ~ 12,
db$diag_1 >= 710 & db$diag_1 <= 739 ~ 13,
db$diag_1 >= 800 & db$diag_1 <= 999 ~ 14,
TRUE ~ 15
)
#turn back into factors
attach(db)
db$diag_1 <- as.factor(db$diag_1)
table(diag_1)
#Random Forest cannot take variables with more than 53 categories
#recode
db$medical_specialty <- case_when(
db$medical_specialty == "?" ~ "Missing",
db$medical_specialty == "Cardiology" ~ "Cardiology",
db$medical_specialty == "Emergency/Trauma" ~ "Emergency/Trauma",
db$medical_specialty == "Family/GeneralPractice" ~ "GeneralPractice",
db$medical_specialty == "InternalMedicine" ~ "InternalMedicine",
db$medical_specialty == "Orthopedics" ~ "Orthopedics",
db$medical_specialty == "Orthopedics-Reconstructive" ~ "Orthopedics-Reconstructive",
db$medical_specialty == "Surgery-General" | db$medical_specialty == "Surgeon" |
db$medical_specialty == "Surgery-Cardiovascular" | db$medical_specialty == "Surgery-Cardiovascular/Thoracic" |
db$medical_specialty == "Surgery-Colon&Rectal" | db$medical_specialty == "Surgery-Neuro" |
db$medical_specialty == "Surgery-Maxillofacial" | db$medical_specialty == "Surgery-Pediatric" | db$medical_specialty == "Surgery-Plastic" |
db$medical_specialty == "Surgery-PlasticwithinHeadandNeck" | db$medical_specialty == "Surgery-Thoracic" |
db$medical_specialty == "Surgery-Vascular" | db$medical_specialty == "SurgicalSpecialty" ~ "Surgery",
TRUE ~ "Other"
)
db$medical_specialty <- as.factor(db$medical_specialty)
str(db)
unique(db$medical_specialty)
table(db$medical_specialty)
#recoding admitted variable
db$readmitted <- ifelse(db$readmitted == "<30", "1", "0")
db$readmitted <- as.factor(db$readmitted)
if(!(require(caret))) install.packages("caret")
if(!(require(e1071))) install.packages("e1071")
#trying to tune RF model using caret package
set.seed(1)
?trainControl()
#grid search
control <- trainControl(method="repeatedcv", number=10, repeats=3, search="grid")
tunegrid <- expand.grid(.mtry=c(1:10)) #searching through mtry values of 1 through 15
############################ Train/Test Split ####################################################
#createDataPartition maintains ratio of dependent variable in train and test datasets
set.seed(1)
train_ind <- createDataPartition(y = new_db$readmitted, p=0.75, list=FALSE)
train <- new_db[train_ind, ]
test <- new_db[-train_ind, ]
#check to see if ratios are maintained
table(train$readmitted)
table(test$readmitted)
#trying to tune RF model using caret package
set.seed(1)
#grid search
control <- trainControl(method="repeatedcv", number=10, repeats=3, search="grid")
tunegrid <- expand.grid(.mtry=c(1:10)) #searching through mtry values of 1 through 15
rf_gridsearch <- train(readmitted~., data=train, method="rf", tuneGrid=tunegrid, trControl=control)
rf_auc
?randomForest
##### 2a. Random Forest - tuning parameters ####
set.seed(1)
##### 2a. Random Forest - tuning parameters ####
set.seed(1)
rf_mod2 <- randomForest(readmitted~., data=train,ntree=500, mtry=2)
print(rf_mod2) #print results
importance(rf_mod2) #look at importance of predictors
varImpPlot(rf_mod2)
rf_pred2 <- predict(rf_mod2, newdata=test[,-23], type="prob")
rf_auc2 <- auc(test$readmitted, rf_pred[,2])
rf_auc2 <- auc(test$readmitted, rf_pred2[,2])
plot(roc(test$readmitted,rf_pred2[,2]), main="ROC of Random Forest")
rf_auc
rf_auc
rf_auc2
##### 2a. Random Forest - tuning parameters ####
set.seed(1)
rf_mod2 <- randomForest(readmitted~., data=train,ntree=500, mtry=3)
print(rf_mod2) #print results
varImpPlot(rf_mod2)
rf_pred2 <- predict(rf_mod2, newdata=test[,-23], type="prob")
rf_auc2 <- auc(test$readmitted, rf_pred2[,2])
rf_auc2
################### Dummy Variables ####################################################
dmy <- dummyVars("~.", data=new_db, fullRank = T)
db_dmy <- data.frame(predict(dmy, newdata=new_db))
head(db_dmy)
set.seed(1)
train_ind1 <- createDataPartition(y = db_dmy$readmitted.1, p=0.75, list=FALSE)
train1 <- db_dmy[train_ind1, ]
test1 <- db_dmy[-train_ind1, ]
#check to see if ratios are maintained
table(train1$readmitted.1)
table(test1$readmitted.1)
# 1. Logistic Regression
set.seed(1)
lg_mod <- glm(readmitted.1~., family=binomial(link='logit'),data=train1)
summary(lg_mod)
#predictions with probabilities
lg_pred <- predict(lg_mod, newdata=test1[,-123], type="response")
lg_auc <- auc(test1$readmitted.1, lg_pred)
plot(roc(test1$readmitted.1,lg_pred), main="ROC of Logstic Regression")
lg_auc
out_Agg_dummy_r01 <- read.csv("C:/Users/phamn_000/Downloads/out_Agg_dummy_r01.csv")
View(out_Agg_dummy_r01)
setwd("~/GitHub/heritage-health")
